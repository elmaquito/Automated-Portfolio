# Script de validation publication - Portfolio Automatise
# Bas√© sur l'analyse compl√®te des pr√©requis
# Ismael Martinez - 2025

param(
    [Parameter(Mandatory=$false)]
    [string]$FilePath = "",
    
    [Parameter(Mandatory=$false)]
    [switch]$FixProblems = $false
)

function Write-ColoredOutput {
    param($Message, $Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Test-FileNameValidity {
    param($FilePath)
    
    $fileName = Split-Path $FilePath -Leaf
    $baseName = [System.IO.Path]::GetFileNameWithoutExtension($fileName)
    
    $issues = @()
    
    # Test caract√®res autoris√©s
    if ($baseName -match '[^a-zA-Z0-9\-_]') {
        $issues += "Caract√®res non autoris√©s dans le nom (utilisez seulement a-z, A-Z, 0-9, -, _)"
    }
    
    # Test longueur
    if ($baseName.Length -gt 50) {
        $issues += "Nom trop long (max 50 caract√®res, actuel: $($baseName.Length))"
    }
    
    # Test extension
    if (-not $fileName.EndsWith('.md')) {
        $issues += "Extension incorrecte (doit √™tre .md)"
    }
    
    return @{
        Valid = $issues.Count -eq 0
        Issues = $issues
        Suggestion = if ($issues.Count -gt 0) { 
            ($baseName -replace '[^a-zA-Z0-9\-_]', '-' -replace '-+', '-' -replace '^-|-$', '').Substring(0, [Math]::Min(50, $baseName.Length)) + '.md'
        } else { $null }
    }
}

function Test-FrontmatterFormat {
    param($FilePath)
    
    $content = Get-Content $FilePath -Raw -Encoding UTF8
    $issues = @()
    
    # Test pr√©sence frontmatter
    if (-not ($content -match '^---\r?\n.*?\r?\n---\r?\n')) {
        $issues += "Frontmatter YAML manquant ou mal format√©"
        return @{ Valid = $false; Issues = $issues }
    }
    
    # Extraire frontmatter
    $frontmatterMatch = [regex]::Match($content, '^---\r?\n(.*?)\r?\n---\r?\n', [System.Text.RegularExpressions.RegexOptions]::Singleline)
    if (-not $frontmatterMatch.Success) {
        $issues += "Impossible d'extraire le frontmatter"
        return @{ Valid = $false; Issues = $issues }
    }
    
    $frontmatter = $frontmatterMatch.Groups[1].Value
    
    # Test champs obligatoires
    $requiredFields = @('title', 'description', 'tags', 'date')
    foreach ($field in $requiredFields) {
        if (-not ($frontmatter -match "$field\s*:")) {
            $issues += "Champ obligatoire manquant: $field"
        }
    }
    
    # Test format tags (doit √™tre array, pas multiligne)
    if ($frontmatter -match 'tags:\s*\n\s*-') {
        $issues += "Tags au format multiligne d√©tect√© - utiliser format array: tags: [""tag1"", ""tag2""]"
    }
    
    # Test format date
    if ($frontmatter -match 'date:\s*(\d{4}-\d{2}-\d{2})$') {
        $issues += "Format de date incomplet - utiliser format ISO: 2025-10-23T13:15:05Z"
    }
    
    # Test caract√®res sp√©ciaux dans title/description
    if ($frontmatter -match 'title:.*[√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∏√π√∫√ª√º√Ω√æ√ø]') {
        $issues += "Accents d√©tect√©s dans le titre - remplacer par √©quivalents sans accent"
    }
    
    if ($frontmatter -match 'description:.*[√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∏√π√∫√ª√º√Ω√æ√ø]') {
        $issues += "Accents d√©tect√©s dans la description - remplacer par √©quivalents sans accent"
    }
    
    return @{
        Valid = $issues.Count -eq 0
        Issues = $issues
    }
}

function Test-ShortcodesPresent {
    param($FilePath)
    
    $content = Get-Content $FilePath -Raw -Encoding UTF8
    $issues = @()
    
    # Test pr√©sence des shortcodes obligatoires
    if (-not ($content -match '\{\{<\s*difficulty\s+level=')) {
        $issues += "Shortcode difficulty manquant - ajouter: {{< difficulty level=""intermediate"" >}}"
    }
    
    if (-not ($content -match '\{\{<\s*reading-time\s+minutes=')) {
        $issues += "Shortcode reading-time manquant - ajouter: {{< reading-time minutes=""5"" >}}"
    }
    
    return @{
        Valid = $issues.Count -eq 0
        Issues = $issues
    }
}

function Test-HugoGeneration {
    param($FilePath)
    
    Write-ColoredOutput "üîß Test de g√©n√©ration Hugo..." "Yellow"
    
    # Test dry-run
    $output = hugo --dry-run 2>&1
    if ($LASTEXITCODE -ne 0) {
        return @{
            Valid = $false
            Issues = @("Erreurs de g√©n√©ration Hugo d√©tect√©es", "Output: $output")
        }
    }
    
    # Test g√©n√©ration r√©elle
    $output = hugo --cleanDestinationDir --gc --minify 2>&1
    if ($LASTEXITCODE -ne 0) {
        return @{
            Valid = $false
            Issues = @("√âchec de g√©n√©ration Hugo", "Output: $output")
        }
    }
    
    # V√©rifier que le fichier est g√©n√©r√©
    $relativePath = $FilePath -replace [regex]::Escape($PWD.Path + "\content\"), ""
    $expectedPath = $relativePath -replace '\.md$', '' -replace '\\', '/' -replace 'docs/', 'docs/' | ForEach-Object { $_.ToLower() }
    $expectedFullPath = "public/$expectedPath/index.html"
    
    if (-not (Test-Path $expectedFullPath)) {
        # Essayer de trouver o√π le fichier a √©t√© g√©n√©r√©
        $fileName = [System.IO.Path]::GetFileNameWithoutExtension($FilePath).ToLower()
        $foundFiles = Get-ChildItem "public" -Recurse -Name "index.html" | Where-Object { $_ -match $fileName }
        
        if ($foundFiles) {
            Write-ColoredOutput "‚ÑπÔ∏è  Fichier g√©n√©r√© √†: $($foundFiles[0])" "Blue"
            return @{ Valid = $true; Issues = @() }
        } else {
            return @{
                Valid = $false
                Issues = @("Fichier non g√©n√©r√© dans public/ - attendu: $expectedFullPath")
            }
        }
    }
    
    return @{ Valid = $true; Issues = @() }
}

function Test-LayoutsPresent {
    Write-ColoredOutput "üé® Test des layouts..." "Yellow"
    
    $requiredLayouts = @(
        "layouts/_default/baseof.html",
        "layouts/_default/single.html", 
        "layouts/_default/list.html",
        "layouts/shortcodes/difficulty.html",
        "layouts/shortcodes/reading-time.html"
    )
    
    $issues = @()
    foreach ($layout in $requiredLayouts) {
        if (-not (Test-Path $layout)) {
            $issues += "Layout manquant: $layout"
        }
    }
    
    return @{
        Valid = $issues.Count -eq 0
        Issues = $issues
    }
}

function Invoke-PublicationValidation {
    param($FilePath)
    
    Write-ColoredOutput "üîç VALIDATION PUBLICATION : $FilePath" "Cyan"
    Write-ColoredOutput "=" * 60 "Cyan"
    
    if (-not (Test-Path $FilePath)) {
        Write-ColoredOutput "‚ùå Fichier non trouv√© : $FilePath" "Red"
        return $false
    }
    
    $allValid = $true
    $allIssues = @()
    
    # Test 1: Layouts
    Write-ColoredOutput "üé® Test 1: Layouts et templates..." "Yellow"
    $layoutsResult = Test-LayoutsPresent
    if ($layoutsResult.Valid) {
        Write-ColoredOutput "‚úÖ Layouts pr√©sents" "Green"
    } else {
        Write-ColoredOutput "‚ùå Layouts manquants :" "Red"
        foreach ($issue in $layoutsResult.Issues) {
            Write-ColoredOutput "   - $issue" "Red"
        }
        $allValid = $false
        $allIssues += $layoutsResult.Issues
    }
    
    # Test 2: Nom de fichier
    Write-ColoredOutput "üìÑ Test 2: Nom de fichier..." "Yellow"
    $nameResult = Test-FileNameValidity $FilePath
    if ($nameResult.Valid) {
        Write-ColoredOutput "‚úÖ Nom de fichier valide" "Green"
    } else {
        Write-ColoredOutput "‚ùå Probl√®mes de nom de fichier :" "Red"
        foreach ($issue in $nameResult.Issues) {
            Write-ColoredOutput "   - $issue" "Red"
        }
        if ($nameResult.Suggestion) {
            Write-ColoredOutput "üí° Suggestion : $($nameResult.Suggestion)" "Yellow"
        }
        $allValid = $false
        $allIssues += $nameResult.Issues
    }
    
    # Test 3: Frontmatter
    Write-ColoredOutput "üìã Test 3: Frontmatter YAML..." "Yellow"
    $frontmatterResult = Test-FrontmatterFormat $FilePath
    if ($frontmatterResult.Valid) {
        Write-ColoredOutput "‚úÖ Frontmatter valide" "Green"
    } else {
        Write-ColoredOutput "‚ùå Probl√®mes de frontmatter :" "Red"
        foreach ($issue in $frontmatterResult.Issues) {
            Write-ColoredOutput "   - $issue" "Red"
        }
        $allValid = $false
        $allIssues += $frontmatterResult.Issues
    }
    
    # Test 4: Shortcodes
    Write-ColoredOutput "üîß Test 4: Shortcodes..." "Yellow"
    $shortcodesResult = Test-ShortcodesPresent $FilePath
    if ($shortcodesResult.Valid) {
        Write-ColoredOutput "‚úÖ Shortcodes pr√©sents" "Green"
    } else {
        Write-ColoredOutput "‚ùå Shortcodes manquants :" "Red"
        foreach ($issue in $shortcodesResult.Issues) {
            Write-ColoredOutput "   - $issue" "Red"
        }
        $allValid = $false
        $allIssues += $shortcodesResult.Issues
    }
    
    # Test 5: G√©n√©ration Hugo (seulement si les autres tests passent)
    if ($allValid) {
        Write-ColoredOutput "üöÄ Test 5: G√©n√©ration Hugo..." "Yellow"
        $hugoResult = Test-HugoGeneration $FilePath
        if ($hugoResult.Valid) {
            Write-ColoredOutput "‚úÖ G√©n√©ration Hugo r√©ussie" "Green"
        } else {
            Write-ColoredOutput "‚ùå Probl√®mes de g√©n√©ration :" "Red"
            foreach ($issue in $hugoResult.Issues) {
                Write-ColoredOutput "   - $issue" "Red"
            }
            $allValid = $false
            $allIssues += $hugoResult.Issues
        }
    } else {
        Write-ColoredOutput "‚è≠Ô∏è  Test g√©n√©ration Hugo ignor√© (corriger les erreurs pr√©c√©dentes)" "Yellow"
    }
    
    Write-ColoredOutput "" "White"
    if ($allValid) {
        Write-ColoredOutput "üéâ VALIDATION R√âUSSIE ! Fichier pr√™t pour publication." "Green"
        Write-ColoredOutput "üåê Le fichier sera disponible apr√®s d√©ploiement." "Blue"
    } else {
        Write-ColoredOutput "‚ö†Ô∏è  VALIDATION √âCHOU√âE ! $($allIssues.Count) probl√®mes d√©tect√©s." "Red"
        Write-ColoredOutput "" "White"
        Write-ColoredOutput "üîß ACTIONS RECOMMAND√âES :" "Yellow"
        Write-ColoredOutput "1. Corriger les probl√®mes list√©s ci-dessus" "White"
        Write-ColoredOutput "2. Relancer la validation" "White"
        Write-ColoredOutput "3. Une fois valid√©, committer et pousser" "White"
    }
    
    return $allValid
}

# =========================================
# EX√âCUTION PRINCIPALE
# =========================================

Write-ColoredOutput "üîç VALIDATEUR PUBLICATION - Portfolio Automatis√©" "Cyan"
Write-ColoredOutput "===============================================" "Cyan"

if ($FilePath -ne "") {
    # Validation d'un fichier sp√©cifique
    $result = Invoke-PublicationValidation $FilePath
    exit $(if ($result) { 0 } else { 1 })
} else {
    # Validation de tous les fichiers r√©cents
    Write-ColoredOutput "üìÅ Recherche des fichiers Markdown modifi√©s..." "Yellow"
    
    $recentFiles = Get-ChildItem "content" -Recurse -Filter "*.md" | Where-Object { 
        $_.LastWriteTime -gt (Get-Date).AddDays(-1) 
    }
    
    if ($recentFiles.Count -eq 0) {
        Write-ColoredOutput "‚ÑπÔ∏è  Aucun fichier modifi√© r√©cemment trouv√©." "Blue"
        Write-ColoredOutput "üí° Sp√©cifiez un fichier : .\scripts\validate-publication.ps1 -FilePath ""chemin/fichier.md""" "Yellow"
        exit 0
    }
    
    Write-ColoredOutput "üìù Trouv√© $($recentFiles.Count) fichiers modifi√©s r√©cemment" "Blue"
    
    $validFiles = 0
    $invalidFiles = 0
    
    foreach ($file in $recentFiles) {
        Write-ColoredOutput "" "White"
        $result = Invoke-PublicationValidation $file.FullName
        if ($result) {
            $validFiles++
        } else {
            $invalidFiles++
        }
    }
    
    Write-ColoredOutput "" "White"
    Write-ColoredOutput "üìä R√âSUM√â GLOBAL" "Cyan"
    Write-ColoredOutput "===============" "Cyan"
    Write-ColoredOutput "‚úÖ Fichiers pr√™ts : $validFiles" "Green"
    Write-ColoredOutput "‚ùå Fichiers probl√©matiques : $invalidFiles" "Red"
    Write-ColoredOutput "üìÅ Total analys√© : $($recentFiles.Count)" "Blue"
    
    if ($invalidFiles -eq 0) {
        Write-ColoredOutput "" "White"
        Write-ColoredOutput "üéâ TOUS LES FICHIERS SONT PR√äTS POUR PUBLICATION !" "Green"
        exit 0
    } else {
        Write-ColoredOutput "" "White"
        Write-ColoredOutput "‚ö†Ô∏è  Corrigez les erreurs avant de publier." "Yellow"
        exit 1
    }
}