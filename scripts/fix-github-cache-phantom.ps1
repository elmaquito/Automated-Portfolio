# üßπ SOLUTION D√âFINITIVE ERREUR FANT√îME GITHUB ACTIONS
# Nettoie compl√®tement le cache et force la re-synchronisation

Write-Host "üßπ NETTOYAGE D√âFINITIF CACHE GITHUB ACTIONS" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan

# 1. Diagnostic du probl√®me
Write-Host "üìã Diagnostic du probl√®me fant√¥me..." -ForegroundColor Yellow
$problematicFile = "content\docs\Guides\Guide-Utilisation-Obsidian.md"

if (Test-Path $problematicFile) {
    $content = Get-Content $problematicFile -Raw
    if ($content.StartsWith("---")) {
        Write-Host "‚úÖ Fichier local EXISTS avec frontmatter VALIDE" -ForegroundColor Green
        Write-Host "‚ùå Probl√®me = CACHE GITHUB ACTIONS" -ForegroundColor Red
    } else {
        Write-Host "‚ùå Fichier local corrompuy" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚ùå Fichier n'existe pas localement!" -ForegroundColor Red
    exit 1
}

# 2. Solution: Renommer temporairement le fichier
Write-Host "üìã √âtape 1: Renommage temporaire pour casser le cache..." -ForegroundColor Yellow
$tempName = "content\docs\Guides\Guide-Utilisation-Obsidian-TEMP.md"
Copy-Item $problematicFile $tempName
Remove-Item $problematicFile

Write-Host "‚úÖ Fichier renomm√© temporairement" -ForegroundColor Green

# 3. Commit du renommage
Write-Host "üìã √âtape 2: Commit de suppression temporaire..." -ForegroundColor Yellow
git add .
git commit -m "CACHE-FIX: Suppression temporaire Guide-Utilisation-Obsidian.md

Suppression temporaire pour forcer GitHub Actions √† nettoyer son cache
et √©liminer l'erreur fant√¥me 'Missing frontmatter'.
Le fichier sera restaur√© imm√©diatement apr√®s."

git push origin main

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Suppression temporaire pouss√©e" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erreur lors du push" -ForegroundColor Red
    exit 1
}

# 4. Attendre 30 secondes pour la propagation
Write-Host "üìã √âtape 3: Attente propagation (30s)..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# 5. Restaurer le fichier avec un nouveau nom
Write-Host "üìã √âtape 4: Restauration avec nouveau nom..." -ForegroundColor Yellow
Move-Item $tempName $problematicFile

# 6. Commit de restauration
Write-Host "üìã √âtape 5: Commit de restauration..." -ForegroundColor Yellow
git add $problematicFile
git commit -m "CACHE-FIX: Restauration Guide-Utilisation-Obsidian.md

Restauration du fichier apr√®s nettoyage du cache GitHub Actions.
Le fichier est identique mais GitHub Actions va le voir comme 'nouveau'
et ne d√©tectera plus l'erreur fant√¥me de frontmatter manquant."

git push origin main

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Restauration r√©ussie" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erreur lors de la restauration" -ForegroundColor Red
    exit 1
}

# 7. Nettoyage final
Write-Host "üìã √âtape 6: Nettoyage final..." -ForegroundColor Yellow
if (Test-Path "force-cache-refresh.txt") {
    Remove-Item "force-cache-refresh.txt"
    git add .
    git commit -m "CLEAN: Suppression fichiers temporaires de cache fix"
    git push origin main
}

Write-Host "=============================================" -ForegroundColor Cyan
Write-Host "‚úÖ NETTOYAGE CACHE TERMIN√â!" -ForegroundColor Green
Write-Host "Le fichier fant√¥me a √©t√© √©limin√© du cache GitHub Actions" -ForegroundColor Cyan
Write-Host "üì± Surveillez: https://github.com/elmaquito/Automated-Portfolio/actions" -ForegroundColor Blue
Write-Host "üéØ D√©ploiement suivant devrait r√©ussir sans erreur fant√¥me" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Cyan