# üîç SCRIPT DE VALIDATION MARKDOWN LOCAL
# Reproduit la validation GitHub Actions en local

Write-Host "üîç Validation Markdown locale - $(Get-Date -Format 'HH:mm:ss')" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan

# Compter les erreurs
$errorCount = 0

# V√©rifier les conflits de merge
Write-Host "üìù V√©rification des conflits de merge..." -ForegroundColor Yellow
$conflictFiles = Get-ChildItem -Path "content/" -Recurse -Include "*.md" | Where-Object {
    (Get-Content $_.FullName -Raw) -match "<<<<<<< HEAD|=======|>>>>>>> "
}
if ($conflictFiles.Count -gt 0) {
    Write-Host "‚ùå Conflits de merge trouv√©s:" -ForegroundColor Red
    $conflictFiles | ForEach-Object { Write-Host "  - $($_.FullName)" -ForegroundColor Red }
    $errorCount += $conflictFiles.Count
} else {
    Write-Host "‚úÖ Aucun conflit de merge" -ForegroundColor Green
}

# V√©rifier les frontmatter
Write-Host "üìã Validation des frontmatter YAML..." -ForegroundColor Yellow
$mdFiles = Get-ChildItem -Path "content/" -Recurse -Include "*.md"

foreach ($file in $mdFiles) {
    Write-Host "V√©rification: $($file.FullName -replace [regex]::Escape($PWD), '.')" -ForegroundColor Gray
    
    $content = Get-Content $file.FullName -Raw
    if ([string]::IsNullOrEmpty($content)) {
        Write-Host "‚ùå Fichier vide: $($file.Name)" -ForegroundColor Red
        $errorCount++
        continue
    }
    
    # V√©rifier que le fichier commence par ---
    if (-not $content.StartsWith("---`n") -and -not $content.StartsWith("---`r`n")) {
        Write-Host "‚ùå Frontmatter manquant: $($file.Name)" -ForegroundColor Red
        $errorCount++
        continue
    }
    
    # Extraire le frontmatter
    $lines = $content -split "`n"
    $frontmatterEnd = -1
    for ($i = 1; $i -lt $lines.Length; $i++) {
        if ($lines[$i].Trim() -eq "---") {
            $frontmatterEnd = $i
            break
        }
    }
    
    if ($frontmatterEnd -eq -1) {
        Write-Host "‚ùå Frontmatter non ferm√©: $($file.Name)" -ForegroundColor Red
        $errorCount++
        continue
    }
    
    # V√©rifier la pr√©sence du titre
    $frontmatter = $lines[1..($frontmatterEnd-1)] -join "`n"
    if ($frontmatter -notmatch "title\s*:") {
        Write-Host "‚ùå Titre manquant dans frontmatter: $($file.Name)" -ForegroundColor Red
        $errorCount++
        continue
    }
    
    Write-Host "‚úÖ Valide: $($file.Name)" -ForegroundColor Green
}

# R√©sum√© final
Write-Host "================================================" -ForegroundColor Cyan
if ($errorCount -eq 0) {
    Write-Host "‚úÖ TOUS LES FICHIERS SONT VALIDES!" -ForegroundColor Green
    Write-Host "üöÄ Le d√©ploiement devrait r√©ussir" -ForegroundColor Cyan
    exit 0
} else {
    Write-Host "‚ùå $errorCount erreur(s) trouv√©e(s)" -ForegroundColor Red
    Write-Host "üîß Corrigez ces erreurs avant de committer" -ForegroundColor Yellow
    Write-Host "üí° Ou ajoutez [skip-validation] au message de commit" -ForegroundColor Blue
    exit 1
}