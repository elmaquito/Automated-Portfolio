name: 🚀 Build and Deploy to OVH (v2.0 - No Node.js)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  repository_dispatch:
    types: [obsidian-sync-complete]

permissions:
  contents: read
  actions: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # ✅ This workflow version does NOT use Node.js - Hugo only
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true

    - name: ⚙️ Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: 'latest'
        extended: true

    - name:  Setup Go for Hugo modules
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: 📚 Initialize Hugo modules (if needed)
      run: |
        if [ ! -f "go.mod" ]; then
          hugo mod init github.com/elmaquito/Automated-Portfolio
        fi
        # Skip module update to avoid template conflicts
        # hugo mod get -u
        # hugo mod tidy
        echo "Using built-in layouts instead of external themes"
        
    - name: ✅ Validate Markdown files
      run: |
        echo "🔍 Validating Markdown files for common issues..."
        
        # Check for skip validation in commit message
        if echo "${{ github.event.head_commit.message }}" | grep -qi "\[skip-validation\]\|\[skip-md\]"; then
          echo "⏭️ Skipping Markdown validation due to commit message flag"
          echo "Commit message: ${{ github.event.head_commit.message }}"
          exit 0
        fi
        
        # Check for Git merge conflict markers
        echo "📝 Checking for merge conflicts..."
        if grep -r "<<<<<<< HEAD\|=======\|>>>>>>> " content/ 2>/dev/null; then
          echo "❌ Merge conflict markers found in content files!"
          echo "Please resolve all merge conflicts before deploying."
          echo "💡 To skip this check, add [skip-validation] to your commit message"
          exit 1
        fi
        echo "✅ No merge conflicts found"
        
        # Check for valid YAML frontmatter
        echo "📋 Validating YAML frontmatter..."
        error_count=0
        for file in $(find content/ -name "*.md" -type f); do
          echo "Checking: $file"
          
          # Check if file starts with ---
          if ! head -n 1 "$file" | grep -q "^---$"; then
            echo "❌ Missing frontmatter in: $file"
            error_count=$((error_count + 1))
            continue
          fi
          
          # Extract frontmatter (between first two ---)
          frontmatter=$(awk '/^---$/{if(++c==2) exit} c==1' "$file")
          
          # Check if frontmatter is empty
          if [ -z "$frontmatter" ]; then
            echo "❌ Empty frontmatter in: $file"
            error_count=$((error_count + 1))
            continue
          fi
          
          # Basic YAML validation (check for title)
          if ! echo "$frontmatter" | grep -q "title:"; then
            echo "❌ Missing title in frontmatter: $file"
            error_count=$((error_count + 1))
            continue
          fi
          
          echo "✅ Valid: $file"
        done
        
        if [ $error_count -gt 0 ]; then
          echo "❌ Found $error_count file(s) with issues"
          echo "💡 To skip this check, add [skip-validation] to your commit message"
          exit 1
        fi
        echo "✅ All Markdown files have valid frontmatter"
        
        # Check for broken internal references
        echo "🔗 Checking for potential broken refs..."
        broken_refs=0
        if grep -r "ref \"[^/]" content/ 2>/dev/null; then
          echo "⚠️ Found relative refs - consider using absolute paths like '/docs/...' for reliability"
          broken_refs=1
        fi
        
        # Check for common Hugo ref patterns that might break
        if grep -r "{{< ref \"[^\"]*\" >}}" content/ | grep -v "/docs/" 2>/dev/null; then
          echo "⚠️ Found refs without absolute paths - these might cause REF_NOT_FOUND errors"
          broken_refs=1
        fi
        
        if [ $broken_refs -eq 1 ]; then
          echo "💡 Consider updating refs to use absolute paths or add [skip-validation] to commit message if intentional"
        fi
        
        echo "✅ Markdown validation completed successfully"

    - name: 🏗️ Build Hugo site
      env:
        HUGO_ENVIRONMENT: production
      run: |
        echo "🚀 Building Hugo site with error checking..."
        
        # Try Hugo build and capture output
        if ! hugo --minify --enableGitInfo 2>&1 | tee hugo_build.log; then
          echo "❌ Hugo build failed!"
          echo "📋 Build output:"
          cat hugo_build.log
          
          # Check for specific error types
          if grep -q "REF_NOT_FOUND" hugo_build.log; then
            echo ""
            echo "🔗 REF_NOT_FOUND errors detected:"
            grep "REF_NOT_FOUND" hugo_build.log
            echo ""
            echo "💡 Solutions:"
            echo "1. Check that referenced files exist in content/"
            echo "2. Use absolute paths: {{< ref \"/docs/path/file.md\" >}}"
            echo "3. Add [skip-validation] to commit message to skip checks"
          fi
          
          if grep -q "failed to unmarshal YAML" hugo_build.log; then
            echo ""
            echo "📋 YAML frontmatter errors detected:"
            grep "failed to unmarshal YAML" hugo_build.log
            echo ""
            echo "💡 Check for:"
            echo "1. Proper --- delimiters"
            echo "2. Valid YAML syntax"
            echo "3. No merge conflict markers"
          fi
          
          exit 1
        fi
        
        echo "✅ Hugo build successful!"
        rm -f hugo_build.log
        
    - name: 🔍 Basic site validation
      run: |
        echo "📂 Checking if Hugo generated files correctly..."
        ls -la public/
        if [ ! -f "public/index.html" ]; then
          echo "❌ index.html not found in public/"
          exit 1
        fi
        echo "✅ Hugo build validation passed"

    - name: � Check FTP credentials
      if: github.ref == 'refs/heads/main'
      run: |
        if [ -z "$FTP_PASSWORD" ]; then
          echo "❌ FTP_PASSWORD secret is not configured!"
          echo "💡 Please configure it at: https://github.com/${{ github.repository }}/settings/secrets/actions"
          echo "🔑 Secret name: FTP_PASSWORD"
          echo "🔑 Secret value: Pzz8F2SsJA6PcDYUa5ctuzjphstJ"
          exit 1
        fi
      env:
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}

    - name: �🚀 Deploy to OVH via SFTP
      if: github.ref == 'refs/heads/main'
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.cluster021.hosting.ovh.net
        username: martisx
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./public/
        server-dir: ./www/
        port: 21
        protocol: ftp
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store

    - name: 🔔 Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful to https://www.martinezismael.fr"
        else
          echo "❌ Deployment failed"
          exit 1
        fi

  lighthouse-audit:
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔍 Site health check
      run: |
        echo "🌐 Checking if site is accessible..."
        curl -I -s -f https://www.martinezismael.fr || echo "⚠️ Site not yet accessible (normal for first deploy)"
        echo "✅ Health check completed"